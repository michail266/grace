import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import gr.hua.dit.compiler.types.*;
import gr.hua.dit.compiler.errors.*;
import gr.hua.dit.compiler.ast.*;
import gr.hua.dit.compiler.Symbol.*;

terminal T_plus, T_times, T_lpar, T_rpar, T_if, T_then, T_else, T_int, T_char;
terminal T_assign, T_let, T_print, T_prints, T_puts, T_coma, T_geti, T_puti;
terminal T_minus, T_while, T_dot, T_colon, T_semicolon, T_Smaller, T_Bigger, T_OpBr;
terminal T_ClBr, T_OpCuBr, T_ClCuBr, T_Insert, T_SmEQ, T_BigEq, T_do, T_or, T_and, T_div, T_NotEq;
terminal T_fun, T_mod, T_not, T_ref, T_var, T_return, T_nothing, T_DoQu, T_SiQu;
terminal Integer T_num;
terminal java.lang.String T_id, T_string;

non terminal Program program;
non terminal Stmt func_def;
non terminal Stmt header;
non terminal java.util.List<Stmt> local_def_list;
non terminal java.util.List<Stmt> header_list;
non terminal java.util.List<Stmt> block_list;
non terminal java.util.List<Stmt> nested_func_list;
non terminal Stmt local_def;
non terminal Stmt func_decl;
non terminal Stmt var_def;
non terminal Stmt fpar_def;
non terminal java.util.List<Stmt> fpar_def_list;
non terminal Type data_type, type, ret_type, fpar_type;
non terminal Stmt stmt, block;
non terminal Expr expr, func_call, l_value, cond;
non terminal java.util.List<String> id_list;
non terminal java.util.List<Expr> expr_list;
non terminal java.util.List<Stmt> top_level_list;

precedence left T_or;
precedence left T_and;
precedence nonassoc T_assign, T_NotEq;
precedence nonassoc T_Smaller, T_Bigger, T_SmEQ, T_BigEq;
precedence left T_plus, T_minus;
precedence left T_times, T_div, T_mod;
precedence right T_not;
precedence left T_OpBr, T_ClBr;
precedence nonassoc T_else;

start with program;

// Top level can contain function declarations, definitions, variable definitions, and statements
top_level_list ::= func_def:fd {: 
    java.util.LinkedList<Stmt> l = new java.util.LinkedList<Stmt>();
    l.add(fd);
    RESULT = l;
:}
               | func_decl:fd {: 
    java.util.LinkedList<Stmt> l = new java.util.LinkedList<Stmt>();
    l.add(fd);
    RESULT = l;
:}
               | var_def:vd {: 
    java.util.LinkedList<Stmt> l = new java.util.LinkedList<Stmt>();
    l.add(vd);
    RESULT = l;
:}
               | stmt:s {: 
    java.util.LinkedList<Stmt> l = new java.util.LinkedList<Stmt>();
    l.add(s);
    RESULT = l;
:}
               | top_level_list:tll func_def:fd {: 
    tll.add(fd);
    RESULT = tll;
:}
               | top_level_list:tll func_decl:fd {: 
    tll.add(fd);
    RESULT = tll;
:}
               | top_level_list:tll var_def:vd {: 
    tll.add(vd);
    RESULT = tll;
:}
               | top_level_list:tll stmt:s {: 
    tll.add(s);
    RESULT = tll;
:}
               ;

program ::= top_level_list:tll      {: RESULT = new Program(tll); :}
     ;

// Function definition: header followed by zero or more local definitions and a block  
func_def ::= header:h local_def_list:ldl block:b   {: 
    LinkedList<Decl> decls = new LinkedList<Decl>();
    LinkedList<Stmt> stmts = new LinkedList<Stmt>();
    
    // Parameters from header
    if (h instanceof Block) {
        decls.addAll(((Block) h).getDecls());
    }
    
    // Local definitions (zero or more)
    for (Stmt s : ldl) {
        if (s instanceof Block) {
            Block blk = (Block) s;
            decls.addAll(blk.getDecls());
            stmts.addAll(blk.getStmts());
        } else {
            stmts.add(s);
        }
    }
    
    // Main block
    if (b instanceof Block) {
        Block blk = (Block) b;
        decls.addAll(blk.getDecls());
        stmts.addAll(blk.getStmts());
    }
    
    RESULT = new Block(decls, stmts);
:}
       | header:h block:b   {: 
    LinkedList<Decl> decls = new LinkedList<Decl>();
    LinkedList<Stmt> stmts = new LinkedList<Stmt>();
    
    // Parameters from header
    if (h instanceof Block) {
        decls.addAll(((Block) h).getDecls());
    }
    
    // Main block
    if (b instanceof Block) {
        Block blk = (Block) b;
        decls.addAll(blk.getDecls());
        stmts.addAll(blk.getStmts());
    }
    
    RESULT = new Block(decls, stmts);
:}
      ;

header ::= T_fun T_id:id T_lpar fpar_def_list:fpl T_rpar T_colon ret_type:rt  {: 
    LinkedList<Decl> decls = new LinkedList<Decl>();
    for (Stmt s : fpl) {
        if (s instanceof Block) {
            Block blk = (Block) s;
            decls.addAll(blk.getDecls());
        }
    }
    RESULT = new Block(decls, new LinkedList<Stmt>());
:}
       | T_fun T_id:id T_lpar T_rpar T_colon ret_type:rt                     {: RESULT = new Block(new LinkedList<Decl>(), new LinkedList<Stmt>()); :}
       ;

fpar_def ::= T_ref id_list:il T_colon fpar_type:ft  {: 
    LinkedList<Decl> decls = new LinkedList<Decl>();
    for (String id : il) {
        decls.add(new Decl(id, ft));
    }
    RESULT = new Block(decls, new LinkedList<Stmt>());
:}
       | id_list:il T_colon fpar_type:ft            {: 
    LinkedList<Decl> decls = new LinkedList<Decl>();
    for (String id : il) {
        decls.add(new Decl(id, ft));
    }
    RESULT = new Block(decls, new LinkedList<Stmt>());
:}
       ;

fpar_def_list ::= fpar_def:fd                         {: RESULT = new LinkedList<Stmt>(); ((LinkedList<Stmt>)RESULT).add(fd); :}
           | fpar_def_list:fdl T_semicolon fpar_def:fd {: fdl.add(fd); RESULT = fdl; :}
           ;

local_def_list ::=                                     {: RESULT = new LinkedList<Stmt>(); :}
           | local_def_list:ldl local_def:ld           {: ldl.add(ld); RESULT = ldl; :}
           ;

local_def ::= func_def:fd                             {: RESULT = fd; :}
        | func_decl:fd                                {: RESULT = fd; :}
        | var_def:vd                                  {: RESULT = vd; :}
        | stmt:s                                      {: RESULT = s; :}
        | header:h                                    {: RESULT = h; :}
        ;

func_decl ::= header:h T_semicolon                    {: RESULT = h; :}
        ;

var_def ::= T_var id_list:il T_colon type:t T_semicolon {: 
    LinkedList<Decl> decls = new LinkedList<Decl>();
    for (String id : il) {
        decls.add(new Decl(id, t));
    }
    RESULT = new Block(decls, new LinkedList<Stmt>());
:}
      ;

data_type ::= T_int                                   {: RESULT = BasicType.Int; :}
        | T_char                                      {: RESULT = BasicType.Char; :}
        ;

type ::= data_type:dt                                 {: RESULT = dt; :}
   | data_type:dt T_OpBr T_ClBr                       {: RESULT = dt; :}
   | data_type:dt T_OpBr T_num:n T_ClBr               {: RESULT = dt; :}
   ;

ret_type ::= data_type:dt                             {: RESULT = dt; :}
       | T_nothing                                    {: RESULT = BasicType.Int; :}
       ;

fpar_type ::= data_type:dt                            {: RESULT = dt; :}
        | data_type:dt T_OpBr T_ClBr                  {: RESULT = dt; :}
        ;

block ::= T_OpCuBr T_ClCuBr                          {: RESULT = new Block(new LinkedList<Decl>(), new LinkedList<Stmt>()); :}
        | T_OpCuBr local_def_list:ldl T_ClCuBr       {: 
    LinkedList<Decl> decls = new LinkedList<Decl>();
    LinkedList<Stmt> stmts = new LinkedList<Stmt>();
    for (Stmt s : ldl) {
        if (s instanceof Block) {
            Block blk = (Block) s;
            decls.addAll(blk.getDecls());
            stmts.addAll(blk.getStmts());
        } else {
            stmts.add(s);
        }
    }
    RESULT = new Block(decls, stmts);
:}
        ;

stmt ::= T_semicolon                                               {: RESULT = new Block(new LinkedList<Decl>(), new LinkedList<Stmt>()); :}
       | l_value:lv T_Insert expr:e T_semicolon                    {: RESULT = new Let(((Id)lv).getId(), e); :}
       | block:b                                                   {: RESULT = b; :}
       | func_call:fc T_semicolon                                  {: RESULT = new FuncCallStmt((FuncCall)fc); :}
       | T_puts T_lpar expr:e T_rpar T_semicolon                   {: RESULT = new Print(e); :}
       | T_puti T_lpar expr:e T_rpar T_semicolon                   {: RESULT = new Print(e); :}
       | T_if cond:c T_then stmt:s1 T_else stmt:s2                 {: RESULT = new If(c, s1, s2); :}
       | T_if cond:c T_then stmt:s1                                {: RESULT = new If(c, s1); :}
       | T_while cond:c T_do stmt:s                                {: RESULT = new Block(new LinkedList<Decl>(), Collections.singletonList(s)); :}
       | T_return expr:e T_semicolon                               {: RESULT = new Block(new LinkedList<Decl>(), new LinkedList<Stmt>()); :}
       | T_return T_semicolon                                      {: RESULT = new Block(new LinkedList<Decl>(), new LinkedList<Stmt>()); :}
       ;

func_call ::= T_id:id T_lpar expr_list:el T_rpar      {: RESULT = new FuncCall(id, el); :}
        | T_id:id T_lpar T_rpar                       {: RESULT = new FuncCall(id, new LinkedList<Expr>()); :}
        ;

l_value ::= T_id:id                                   {: RESULT = new Id(id); :}
      | l_value:lv T_OpBr expr:e T_ClBr               {: RESULT = lv; :}
      ;

expr ::= T_num:n                                      {: RESULT = new NumConst(n); :}
       | T_string:s                                   {: RESULT = new StringLiteral(s); :}
       | l_value:lv                                   {: RESULT = lv; :}
       | func_call:fc                                 {: RESULT = fc; :}
       | T_geti T_lpar T_rpar                         {: RESULT = new FuncCall("geti", new LinkedList<Expr>()); :}
       | T_lpar expr:e T_rpar                         {: RESULT = e; :}
       | T_plus expr:e                                {: RESULT = e; :}
       | T_minus expr:e                               {: RESULT = e; :}
       | expr:e1 T_plus expr:e2                       {: RESULT = new BinOp(BinOp.Operator.Plus, e1, e2); :}
       | expr:e1 T_minus expr:e2                      {: RESULT = new BinOp(BinOp.Operator.Minus, e1, e2); :}
       | expr:e1 T_times expr:e2                      {: RESULT = new BinOp(BinOp.Operator.Times, e1, e2); :}
       | expr:e1 T_div expr:e2                        {: RESULT = new BinOp(BinOp.Operator.Div, e1, e2); :}
       | expr:e1 T_mod expr:e2                        {: RESULT = new BinOp(BinOp.Operator.Mod, e1, e2); :}
       ;

cond ::= T_lpar cond:c T_rpar                         {: RESULT = c; :}
       | T_not cond:c                                 {: RESULT = c; :}
       | cond:c1 T_and cond:c2                        {: RESULT = c1; :}
       | cond:c1 T_or cond:c2                         {: RESULT = c1; :}
       | expr:e1 T_assign expr:e2                     {: RESULT = new BinOp(BinOp.Operator.Eq, e1, e2); :}
       | expr:e1 T_NotEq expr:e2                      {: RESULT = new BinOp(BinOp.Operator.NotEq, e1, e2); :}
       | expr:e1 T_Smaller expr:e2                    {: RESULT = new BinOp(BinOp.Operator.Less, e1, e2); :}
       | expr:e1 T_Bigger expr:e2                     {: RESULT = new BinOp(BinOp.Operator.Greater, e1, e2); :}
       | expr:e1 T_SmEQ expr:e2                       {: RESULT = new BinOp(BinOp.Operator.LessEq, e1, e2); :}
       | expr:e1 T_BigEq expr:e2                      {: RESULT = new BinOp(BinOp.Operator.GreaterEq, e1, e2); :}
       ;

expr_list ::= expr:e                                  {: RESULT = new LinkedList<Expr>(); ((LinkedList<Expr>)RESULT).add(e); :}
        | expr_list:el T_coma expr:e                  {: el.add(e); RESULT = el; :}
        ;

id_list ::= T_id:id                                   {: RESULT = new LinkedList<String>(); ((LinkedList<String>)RESULT).add(id); :}
      | id_list:il T_coma T_id:id                     {: il.add(id); RESULT = il; :}
      ;

nested_func_list ::=                                         {: RESULT = new LinkedList<Stmt>(); :}
                  | nested_func_list:nfl header:h            {: nfl.add(h); RESULT = nfl; :}
                  ;

// Header list: one or more function headers
header_list ::= header:h                                     {: RESULT = new LinkedList<Stmt>(); ((LinkedList<Stmt>)RESULT).add(h); :}
             | header_list:hl header:h                       {: hl.add(h); RESULT = hl; :}
             ;

block_list ::= block:b                                       {: RESULT = new LinkedList<Stmt>(); ((LinkedList<Stmt>)RESULT).add(b); :}
            | block_list:bl block:b                          {: bl.add(b); RESULT = bl; :}
            ;
